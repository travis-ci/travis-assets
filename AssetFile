$: << 'lib'

require 'travis/assets'
require 'compass'
require 'rake-pipeline-web-filters'
require 'rake-pipeline-web-filters/helpers'

root = project.root
version = Travis::Assets.version

Compass.add_configuration({:project_path => root.to_s}, 'implied')

register :erb,    Travis::Assets::Filters::Tilt
register :hjs,    Travis::Assets::Filters::Handlebars
register :coffee, Rake::Pipeline::Web::Filters::CoffeeScriptFilter
register :scss,   Rake::Pipeline::Web::Filters::SassFilter

tmpdir 'tmp'
output "public/#{version}"

paths = Travis::Assets.paths('javascripts')

input 'assets/javascripts', "{#{paths.join(',')}}" do
  paths.map! { |path| path.gsub(/.hjs|.coffee/, '') }
  concat paths, 'javascripts/application.js'
end

input 'assets/javascripts', "{vendor.js*,mobile.js*,app/helpers/*.js,app/models/*.js,mobile/**/*.js}" do
  concat 'javascripts/mobile.js'
end

input 'assets/javascripts', 'jasmine/**/*.js' do
  concat 'javascripts/jasmine.js'
end

input 'assets/javascripts', 'pro.js*' do
  concat 'javascripts/pro.js'
end

input 'assets/stylesheets', 'application.css*' do
  concat 'stylesheets/application.css'
end

input 'assets/stylesheets', 'mobile.css*' do
  concat 'stylesheets/mobile.css'
end

input 'assets/stylesheets', 'jasmine.css*' do
  concat 'stylesheets/jasmine.css'
end

input 'assets/stylesheets', 'pro.css*' do
  concat 'stylesheets/pro.css'
end


# how to use the copy filter with binary data?
# input 'assets/images' do
#   copy "#{version}/images"
# end

# root   = Pathname.new(File.dirname(__FILE__))
source = root.join('assets')
target = root.join("public/#{Travis::Assets.version}")

`mkdir -p #{target}`
`cp -r #{source.join('images')} #{target}`
